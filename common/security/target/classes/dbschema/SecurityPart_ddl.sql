    
-- ###########################################
-- # Drop entities
-- ###########################################

-- Many to many relations
    
-- Normal entities
DROP TABLE IF EXISTS USER_ROLE;
DROP TABLE IF EXISTS USERPHONE;
DROP TABLE IF EXISTS USERGROUP_ROLE;
DROP TABLE IF EXISTS USERGROUP_CATEGORY;
DROP TABLE IF EXISTS USEREMAIL;
DROP TABLE IF EXISTS USERDELEGATION;
DROP TABLE IF EXISTS USER_CATEGORY;
DROP TABLE IF EXISTS USER;
DROP TABLE IF EXISTS USERGROUP;
DROP TABLE IF EXISTS ROLE_PERMISSION;
DROP TABLE IF EXISTS ROLE;
DROP TABLE IF EXISTS PERMISSION;
DROP TABLE IF EXISTS OPERATION;
DROP TABLE IF EXISTS MODULE;
DROP TABLE IF EXISTS DEPARTMENT;
DROP TABLE IF EXISTS CATEGORYDETAIL_PERMISSION;
DROP TABLE IF EXISTS CATEGORYDETAIL;
DROP TABLE IF EXISTS CATEGORY;
DROP TABLE IF EXISTS APPLICATION;


-- ###########################################
-- # Create new entities
-- ###########################################

-- Normal entities
    
CREATE TABLE APPLICATION (
  ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  CODE VARCHAR(20) NOT NULL,
  NAME VARCHAR(50) NOT NULL,
  DESC VARCHAR(100),
  ACTIVE BOOLEAN NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL,
  CONSTRAINT UNIQUE (CODE, NAME)
	

);

CREATE TABLE CATEGORY (
  ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  CODE VARCHAR(20) NOT NULL,
  NAME VARCHAR(50) NOT NULL,
  DESC VARCHAR(100) NOT NULL,
  ACTIVE BOOLEAN NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL,
  CONSTRAINT UNIQUE (CODE)
	

);

CREATE TABLE CATEGORYDETAIL (
  ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  NAME VARCHAR(50) NOT NULL,
  DESC VARCHAR(100) NOT NULL,
  ACTIVE BOOLEAN NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL,
  CATEGORYDETAILS_INDEX INTEGER,
  CATEGORY BIGINT NOT NULL,
  CONSTRAINT UNIQUE (CATEGORY)
	

);

CREATE TABLE CATEGORYDETAIL_PERMISSION (
  ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  CATEGORY_PERMISSION_CODE VARCHAR(20) NOT NULL,
  CREATE_FLAG BOOLEAN NOT NULL,
  MODIFY_FLAG BOOLEAN NOT NULL,
  DELETE_FLAG BOOLEAN NOT NULL,
  VIEW_FLAG BOOLEAN NOT NULL,
  UUID VARCHAR(36) NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL,
  CATEGORYDETAILPERMISSIONS_INDEX INTEGER,
  CATEGORY_DETAIL BIGINT NOT NULL,
  CONSTRAINT UNIQUE (UUID)
  	

);

CREATE TABLE DEPARTMENT (
  ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  CODE VARCHAR(20) NOT NULL,
  NAME VARCHAR(50) NOT NULL,
  DESC VARCHAR(100),
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL,
  CONSTRAINT UNIQUE (CODE, NAME)
	

);

CREATE TABLE MODULE (
  ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  CODE VARCHAR(20) NOT NULL,
  NAME VARCHAR(50) NOT NULL,
  DESC VARCHAR(100),
  ACTIVE BOOLEAN NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL,
  MODULES_INDEX INTEGER,
  APP_ID BIGINT NOT NULL,
  CONSTRAINT UNIQUE (CODE)
	

);

CREATE TABLE OPERATION (
  ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  CODE VARCHAR(20) NOT NULL,
  NAME VARCHAR(50) NOT NULL,
  DESC VARCHAR(100),
  ACTIVE BOOLEAN NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL,
  OPERATIONS_INDEX INTEGER,
  MODULE_ID BIGINT NOT NULL,
  CONSTRAINT UNIQUE (CODE)
	

);

CREATE TABLE PERMISSION (
  ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  CODE VARCHAR(20) NOT NULL,
  CREATE_FLAG BOOLEAN NOT NULL,
  MODIFY_FLAG BOOLEAN NOT NULL,
  DELETE_FLAG BOOLEAN NOT NULL,
  VIEW_FLAG BOOLEAN NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL,
  PERMISSIONS_INDEX INTEGER,
  OPERATION BIGINT NOT NULL,
  CONSTRAINT UNIQUE (CODE, OPERATION)
	

);

CREATE TABLE ROLE (
  ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  CODE VARCHAR(20) NOT NULL,
  NAME VARCHAR(50) NOT NULL,
  DESC VARCHAR(100),
  ACTIVE BOOLEAN NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL,
  CONSTRAINT UNIQUE (CODE, NAME)
	

);

CREATE TABLE ROLE_PERMISSION (
  ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL,
  ROLEPERMISSIONS_INDEX INTEGER,
  ROLE_ID BIGINT NOT NULL,
  ROLEPERMISSIONS_INDEX INTEGER,
  PERMISSION_ID BIGINT NOT NULL,
  CONSTRAINT UNIQUE (ROLE_ID, PERMISSION_ID)
	

);

CREATE TABLE USERGROUP (
  ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  CODE VARCHAR(10) NOT NULL,
  USERGROUP_NAME VARCHAR(100) NOT NULL,
  USERGROUP_DESC VARCHAR(100),
  ACTIVE BOOLEAN NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL,
  CONSTRAINT UNIQUE (CODE, USERGROUP_NAME)
	

);

CREATE TABLE USER (
  ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  USER_ID VARCHAR(100) NOT NULL,
  FIRST_NAME VARCHAR(100) NOT NULL,
  MIDDLE_NAME VARCHAR(100),
  LAST_NAME VARCHAR(100),
  PASSWORD VARCHAR(50) NOT NULL,
  PASSWORD_EXPIRY_DATE TIMESTAMP NOT NULL,
  DOB DATE NOT NULL,
  ACTIVE BOOLEAN NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL,
  USERS_INDEX INTEGER,
  DEPARTMENT BIGINT NOT NULL,
  REPORTING_USER BIGINT,
  USERS_INDEX INTEGER,
  USERGROUP BIGINT NOT NULL,
  CONSTRAINT UNIQUE (USER_ID)
	

);

CREATE TABLE USER_CATEGORY (
  ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL,
  USERCATEGORYPERMISSIONS_INDEX INTEGER,
  USER_ID BIGINT NOT NULL,
  USERCATEGORYDETAILPERMISSIONS_INDEX INTEGER,
  CATEGORYDETAIL_PERMISSION_ID BIGINT NOT NULL,
  CONSTRAINT UNIQUE (USER_ID, CATEGORYDETAIL_PERMISSION_ID)
	

);

CREATE TABLE USERDELEGATION (
  ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  ACTIVE BOOLEAN NOT NULL,
  START_DATE TIMESTAMP NOT NULL,
  END_DATE TIMESTAMP NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL,
  USERDELEGATIONS_INDEX INTEGER,
  USER_ID BIGINT NOT NULL,
  USER_DELEGATION_ID BIGINT NOT NULL,
  CONSTRAINT UNIQUE (ACTIVE, START_DATE, USER_ID, USER_DELEGATION_ID)
	

);

CREATE TABLE USEREMAIL (
  ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  EMAIL_TYPE VARCHAR(10) NOT NULL,
  EMAIL_ID VARCHAR(50) NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL,
  EMAILS_INDEX INTEGER,
  USER_ID BIGINT NOT NULL,
  CONSTRAINT UNIQUE (EMAIL_ID)
	

);

CREATE TABLE USERGROUP_CATEGORY (
  ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL,
  USERGROUPCATEGORYPERMISSIONS_INDEX INTEGER,
  USERGROUP_ID BIGINT NOT NULL,
  USERGROUPCATEGORYDETAILPERMISSIONS_INDEX INTEGER,
  CATEGORYDETAIL_PERMISSION_ID BIGINT NOT NULL,
  CONSTRAINT UNIQUE (USERGROUP_ID, CATEGORYDETAIL_PERMISSION_ID)
	

);

CREATE TABLE USERGROUP_ROLE (
  ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL,
  USERGROUPROLES_INDEX INTEGER,
  USER_GROUP_ID BIGINT NOT NULL,
  USERGROUPROLES_INDEX INTEGER,
  ROLE_ID BIGINT NOT NULL,
  CONSTRAINT UNIQUE (USER_GROUP_ID, ROLE_ID)
	

);

CREATE TABLE USERPHONE (
  ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  PHONE_TYPE VARCHAR(10) NOT NULL,
  PHONE_NUMBER VARCHAR(15) NOT NULL,
  UUID VARCHAR(36) NOT NULL,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL,
  PHONES_INDEX INTEGER,
  USER_ID BIGINT NOT NULL,
  CONSTRAINT UNIQUE (UUID)
  	

);

CREATE TABLE USER_ROLE (
  ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  CREATEDDATE TIMESTAMP,
  CREATEDBY VARCHAR(50),
  LASTUPDATED TIMESTAMP,
  LASTUPDATEDBY VARCHAR(50),
  VERSION BIGINT NOT NULL,
  USERROLES_INDEX INTEGER,
  ROLE_ID BIGINT NOT NULL,
  USERROLES_INDEX INTEGER,
  USER_ID BIGINT NOT NULL,
  CONSTRAINT UNIQUE (ROLE_ID, USER_ID)
	

);
  
  
-- Reference from CategoryDetail.CATEGORY to Category
ALTER TABLE CATEGORYDETAIL ADD CONSTRAINT FK_CATEGORYDETAIL_CATEGORY
  FOREIGN KEY (CATEGORY) REFERENCES CATEGORY(ID);
  
-- Reference from CategoryDetailsPermission.CATEGORY_DETAIL to CategoryDetail
ALTER TABLE CATEGORYDETAIL_PERMISSION ADD CONSTRAINT FK_CATEGORYDETAIL_PERMISSION_CATEGORY_DETAIL
  FOREIGN KEY (CATEGORY_DETAIL) REFERENCES CATEGORYDETAIL(ID);
  
  
-- Reference from Modules.APP_ID to Applications
ALTER TABLE MODULE ADD CONSTRAINT FK_MODULE_APP_ID
  FOREIGN KEY (APP_ID) REFERENCES APPLICATION(ID);
  
-- Reference from Operation.MODULE_ID to Modules
ALTER TABLE OPERATION ADD CONSTRAINT FK_OPERATION_MODULE_ID
  FOREIGN KEY (MODULE_ID) REFERENCES MODULE(ID);
  
-- Reference from Permission.OPERATION to Operation
ALTER TABLE PERMISSION ADD CONSTRAINT FK_PERMISSION_OPERATION
  FOREIGN KEY (OPERATION) REFERENCES OPERATION(ID);
  
  
-- Reference from RolePermission.ROLE_ID to Role
ALTER TABLE ROLE_PERMISSION ADD CONSTRAINT FK_ROLE_PERMISSION_ROLE_ID
  FOREIGN KEY (ROLE_ID) REFERENCES ROLE(ID);
-- Reference from RolePermission.PERMISSION_ID to Permission
ALTER TABLE ROLE_PERMISSION ADD CONSTRAINT FK_ROLE_PERMISSION_PERMISSION_ID
  FOREIGN KEY (PERMISSION_ID) REFERENCES PERMISSION(ID);
  
  
-- Reference from User.DEPARTMENT to Department
ALTER TABLE USER ADD CONSTRAINT FK_USER_DEPARTMENT
  FOREIGN KEY (DEPARTMENT) REFERENCES DEPARTMENT(ID);
-- Reference from User.REPORTING_USER to User
ALTER TABLE USER ADD CONSTRAINT FK_USER_REPORTING_USER
  FOREIGN KEY (REPORTING_USER) REFERENCES USER(ID);
-- Reference from User.USERGROUP to UserGroup
ALTER TABLE USER ADD CONSTRAINT FK_USER_USERGROUP
  FOREIGN KEY (USERGROUP) REFERENCES USERGROUP(ID);
  
-- Reference from UserCategoryPermission.USER_ID to User
ALTER TABLE USER_CATEGORY ADD CONSTRAINT FK_USER_CATEGORY_USER_ID
  FOREIGN KEY (USER_ID) REFERENCES USER(ID);
-- Reference from UserCategoryPermission.CATEGORYDETAIL_PERMISSION_ID to CategoryDetailsPermission
ALTER TABLE USER_CATEGORY ADD CONSTRAINT FK_USER_CATEGORY_CATEGORYDETAIL_PERMISSION_ID
  FOREIGN KEY (CATEGORYDETAIL_PERMISSION_ID) REFERENCES CATEGORYDETAIL_PERMISSION(ID);
  
-- Reference from UserDelegation.USER_ID to User
ALTER TABLE USERDELEGATION ADD CONSTRAINT FK_USERDELEGATION_USER_ID
  FOREIGN KEY (USER_ID) REFERENCES USER(ID);
-- Reference from UserDelegation.USER_DELEGATION_ID to User
ALTER TABLE USERDELEGATION ADD CONSTRAINT FK_USERDELEGATION_USER_DELEGATION_ID
  FOREIGN KEY (USER_DELEGATION_ID) REFERENCES USER(ID);
  
-- Reference from UserEmail.USER_ID to User
ALTER TABLE USEREMAIL ADD CONSTRAINT FK_USEREMAIL_USER_ID
  FOREIGN KEY (USER_ID) REFERENCES USER(ID);
  
-- Reference from UserGroupCategoryPermission.USERGROUP_ID to UserGroup
ALTER TABLE USERGROUP_CATEGORY ADD CONSTRAINT FK_USERGROUP_CATEGORY_USERGROUP_ID
  FOREIGN KEY (USERGROUP_ID) REFERENCES USERGROUP(ID);
-- Reference from UserGroupCategoryPermission.CATEGORYDETAIL_PERMISSION_ID to CategoryDetailsPermission
ALTER TABLE USERGROUP_CATEGORY ADD CONSTRAINT FK_USERGROUP_CATEGORY_CATEGORYDETAIL_PERMISSION_ID
  FOREIGN KEY (CATEGORYDETAIL_PERMISSION_ID) REFERENCES CATEGORYDETAIL_PERMISSION(ID);
  
-- Reference from UserGroupRole.USER_GROUP_ID to UserGroup
ALTER TABLE USERGROUP_ROLE ADD CONSTRAINT FK_USERGROUP_ROLE_USER_GROUP_ID
  FOREIGN KEY (USER_GROUP_ID) REFERENCES USERGROUP(ID);
-- Reference from UserGroupRole.ROLE_ID to Role
ALTER TABLE USERGROUP_ROLE ADD CONSTRAINT FK_USERGROUP_ROLE_ROLE_ID
  FOREIGN KEY (ROLE_ID) REFERENCES ROLE(ID);
  
-- Reference from UserPhone.USER_ID to User
ALTER TABLE USERPHONE ADD CONSTRAINT FK_USERPHONE_USER_ID
  FOREIGN KEY (USER_ID) REFERENCES USER(ID);
  
-- Reference from UserRole.ROLE_ID to Role
ALTER TABLE USER_ROLE ADD CONSTRAINT FK_USER_ROLE_ROLE_ID
  FOREIGN KEY (ROLE_ID) REFERENCES ROLE(ID);
-- Reference from UserRole.USER_ID to User
ALTER TABLE USER_ROLE ADD CONSTRAINT FK_USER_ROLE_USER_ID
  FOREIGN KEY (USER_ID) REFERENCES USER(ID);
  
	
-- Many to many relations

    